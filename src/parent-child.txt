// child.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `
    <div>
      <h3>Child Component</h3>
      <p>Received from parent: {{ parentMessage }}</p>

      <input [(ngModel)]="childMessage" placeholder="Type something...">
      <button (click)="sendToParent()">Send to Parent</button>
    </div>
  `,
  styleUrls: ['./child.component.css']
})
export class ChildComponent {
  // Input property to receive data from parent
  @Input() parentMessage: string = '';

  // Output property to send data back to the parent
  @Output() messageEvent = new EventEmitter<string>();

  childMessage: string = '';

  // Function to emit event to parent
  sendToParent() {
    this.messageEvent.emit(this.childMessage);
  }
}



// parent.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  template: `
    <div>
      <h2>Parent Component</h2>
      <p>Message from Child: {{ messageFromChild }}</p>

      <app-child 
        [parentMessage]="messageToChild" 
        (messageEvent)="receiveMessage($event)">
      </app-child>
    </div>
  `,
  styleUrls: ['./parent.component.css']
})
export class ParentComponent {
  // Message to be passed to the child
  messageToChild: string = "Hello from Parent!";

  // Message received from the child
  messageFromChild: string = '';

  // Function to receive the message from the child
  receiveMessage(message: string) {
    this.messageFromChild = message;
  }
}
